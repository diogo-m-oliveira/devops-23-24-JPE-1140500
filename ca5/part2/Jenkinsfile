pipeline {
    agent any

    environment {
        // Define Docker Hub credentials ID as configured in Jenkins credentials
        DOCKERHUB_CREDENTIALS = 'sabesquemeoboda'
        // Define the Docker image name
        IMAGE_NAME = "image-generated-with-jenkins"
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                echo 'Checking out the code from the repository'
                git branch: 'main', url: 'https://github.com/diogo-m-oliveira/devops-23-24-JPE-1140500.git'
            }
        }

        stage('Assemble') {
            steps {
                cleanWs()
                echo 'Assembling...'
                dir('ca2/part2') {
                    script {
                        // Ensure the Gradle Wrapper is executable (Unix) or available (Windows)
                        if (isUnix()) {
                            sh 'chmod +x ./gradlew'
                            sh './gradlew clean assemble -x test'
                        } else {
                            bat 'gradlew.bat clean assemble -x test'
                        }
                    }
                }
            }
            post {
                success {
                    // Archive the build artifacts
                    archiveArtifacts artifacts: '**/build/libs/*.jar', allowEmptyArchive: true
                }
            }
        }

        stage('Test') {
            steps {
                cleanWs()
                echo 'Testing...'
                dir('ca2/part2') {
                    script {
                        // Ensure the Gradle Wrapper is executable (Unix) or available (Windows)
                        if (isUnix()) {
                            sh './gradlew test'
                        } else {
                            bat 'gradlew.bat test'
                        }
                    }
                    // Publish JUnit test results
                    junit '**/build/test-results/test/*.xml'
                }
            }
            post {
                always {
                    // Archive the JUnit test results
                    junit '**/build/test-results/test/TEST-*.xml'
                }
            }
        }

        stage('Javadoc') {
            steps {
                cleanWs()
                echo 'Generating Javadoc...'
                dir('ca2/part2') {
                    script {
                        // Ensure the Gradle Wrapper is executable (Unix) or available (Windows)
                        if (isUnix()) {
                            sh './gradlew javadoc'
                        } else {
                            bat 'gradlew.bat javadoc'
                        }
                    }
                    // Archive and publish Javadoc
                    archiveArtifacts artifacts: '**/build/docs/javadoc/**', allowEmptyArchive: true
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'build/docs/javadoc',
                        reportFiles: 'index.html',
                        reportName: 'Javadoc Report'
                    ]
                }
            }
        }

        stage('Archive') {
            steps {
                cleanWs()
                echo 'Archiving...'
                dir('ca2/part2') {
                    // Archive build artifacts
                    archiveArtifacts artifacts: '**/build/libs/*.jar', allowEmptyArchive: true
                }
            }
        }

        stage('Publish Image') {
            steps {
                cleanWs()
                echo 'Publishing Docker image...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', DOCKERHUB_CREDENTIALS) {
                        def dockerImage = docker.build("${IMAGE_NAME}:${env.BUILD_NUMBER}", '--progress=plain ca5/part2/docker')
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
